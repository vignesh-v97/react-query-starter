{"ast":null,"code":"import _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport { difference, replaceAt } from './utils';\nimport { notifyManager } from './notifyManager';\nimport { QueryObserver } from './queryObserver';\nimport { Subscribable } from './subscribable';\nexport var QueriesObserver = /*#__PURE__*/function (_Subscribable) {\n  _inheritsLoose(QueriesObserver, _Subscribable);\n\n  function QueriesObserver(client, queries) {\n    var _this;\n\n    _this = _Subscribable.call(this) || this;\n    _this.client = client;\n    _this.queries = [];\n    _this.result = [];\n    _this.observers = [];\n    _this.observersMap = {};\n\n    if (queries) {\n      _this.setQueries(queries);\n    }\n\n    return _this;\n  }\n\n  var _proto = QueriesObserver.prototype;\n\n  _proto.onSubscribe = function onSubscribe() {\n    var _this2 = this;\n\n    if (this.listeners.length === 1) {\n      this.observers.forEach(function (observer) {\n        observer.subscribe(function (result) {\n          _this2.onUpdate(observer, result);\n        });\n      });\n    }\n  };\n\n  _proto.onUnsubscribe = function onUnsubscribe() {\n    if (!this.listeners.length) {\n      this.destroy();\n    }\n  };\n\n  _proto.destroy = function destroy() {\n    this.listeners = [];\n    this.observers.forEach(function (observer) {\n      observer.destroy();\n    });\n  };\n\n  _proto.setQueries = function setQueries(queries, notifyOptions) {\n    this.queries = queries;\n    this.updateObservers(notifyOptions);\n  };\n\n  _proto.getCurrentResult = function getCurrentResult() {\n    return this.result;\n  };\n\n  _proto.getOptimisticResult = function getOptimisticResult(queries) {\n    return this.findMatchingObservers(queries).map(function (match) {\n      return match.observer.getCurrentResult();\n    });\n  };\n\n  _proto.findMatchingObservers = function findMatchingObservers(queries) {\n    var _this3 = this;\n\n    var prevObservers = this.observers;\n    var defaultedQueryOptions = queries.map(function (options) {\n      return _this3.client.defaultQueryObserverOptions(options);\n    });\n    var matchingObservers = defaultedQueryOptions.flatMap(function (defaultedOptions) {\n      var match = prevObservers.find(function (observer) {\n        return observer.options.queryHash === defaultedOptions.queryHash;\n      });\n\n      if (match != null) {\n        return [{\n          defaultedQueryOptions: defaultedOptions,\n          observer: match\n        }];\n      }\n\n      return [];\n    });\n    var matchedQueryHashes = matchingObservers.map(function (match) {\n      return match.defaultedQueryOptions.queryHash;\n    });\n    var unmatchedQueries = defaultedQueryOptions.filter(function (defaultedOptions) {\n      return !matchedQueryHashes.includes(defaultedOptions.queryHash);\n    });\n    var unmatchedObservers = prevObservers.filter(function (prevObserver) {\n      return !matchingObservers.some(function (match) {\n        return match.observer === prevObserver;\n      });\n    });\n    var newOrReusedObservers = unmatchedQueries.map(function (options, index) {\n      if (options.keepPreviousData) {\n        // return previous data from one of the observers that no longer match\n        var previouslyUsedObserver = unmatchedObservers[index];\n\n        if (previouslyUsedObserver !== undefined) {\n          return {\n            defaultedQueryOptions: options,\n            observer: previouslyUsedObserver\n          };\n        }\n      }\n\n      return {\n        defaultedQueryOptions: options,\n        observer: _this3.getObserver(options)\n      };\n    });\n    return matchingObservers.concat(newOrReusedObservers);\n  };\n\n  _proto.getObserver = function getObserver(options) {\n    var defaultedOptions = this.client.defaultQueryObserverOptions(options);\n    var currentObserver = this.observersMap[defaultedOptions.queryHash];\n    return currentObserver != null ? currentObserver : new QueryObserver(this.client, defaultedOptions);\n  };\n\n  _proto.updateObservers = function updateObservers(notifyOptions) {\n    var _this4 = this;\n\n    notifyManager.batch(function () {\n      var prevObservers = _this4.observers;\n\n      var newObserverMatches = _this4.findMatchingObservers(_this4.queries); // set options for the new observers to notify of changes\n\n\n      newObserverMatches.forEach(function (match) {\n        return match.observer.setOptions(match.defaultedQueryOptions, notifyOptions);\n      });\n      var newObservers = newObserverMatches.map(function (match) {\n        return match.observer;\n      });\n      var newObserversMap = Object.fromEntries(newObservers.map(function (observer) {\n        return [observer.options.queryHash, observer];\n      }));\n      var newResult = newObservers.map(function (observer) {\n        return observer.getCurrentResult();\n      });\n      var hasIndexChange = newObservers.some(function (observer, index) {\n        return observer !== prevObservers[index];\n      });\n\n      if (prevObservers.length === newObservers.length && !hasIndexChange) {\n        return;\n      }\n\n      _this4.observers = newObservers;\n      _this4.observersMap = newObserversMap;\n      _this4.result = newResult;\n\n      if (!_this4.hasListeners()) {\n        return;\n      }\n\n      difference(prevObservers, newObservers).forEach(function (observer) {\n        observer.destroy();\n      });\n      difference(newObservers, prevObservers).forEach(function (observer) {\n        observer.subscribe(function (result) {\n          _this4.onUpdate(observer, result);\n        });\n      });\n\n      _this4.notify();\n    });\n  };\n\n  _proto.onUpdate = function onUpdate(observer, result) {\n    var index = this.observers.indexOf(observer);\n\n    if (index !== -1) {\n      this.result = replaceAt(this.result, index, result);\n      this.notify();\n    }\n  };\n\n  _proto.notify = function notify() {\n    var _this5 = this;\n\n    notifyManager.batch(function () {\n      _this5.listeners.forEach(function (listener) {\n        listener(_this5.result);\n      });\n    });\n  };\n\n  return QueriesObserver;\n}(Subscribable);","map":{"version":3,"sources":["C:/Users/I_am_vky/Documents/workouts/React-Query-Tutorials/react-query-starter/node_modules/react-query/es/core/queriesObserver.js"],"names":["_inheritsLoose","difference","replaceAt","notifyManager","QueryObserver","Subscribable","QueriesObserver","_Subscribable","client","queries","_this","call","result","observers","observersMap","setQueries","_proto","prototype","onSubscribe","_this2","listeners","length","forEach","observer","subscribe","onUpdate","onUnsubscribe","destroy","notifyOptions","updateObservers","getCurrentResult","getOptimisticResult","findMatchingObservers","map","match","_this3","prevObservers","defaultedQueryOptions","options","defaultQueryObserverOptions","matchingObservers","flatMap","defaultedOptions","find","queryHash","matchedQueryHashes","unmatchedQueries","filter","includes","unmatchedObservers","prevObserver","some","newOrReusedObservers","index","keepPreviousData","previouslyUsedObserver","undefined","getObserver","concat","currentObserver","_this4","batch","newObserverMatches","setOptions","newObservers","newObserversMap","Object","fromEntries","newResult","hasIndexChange","hasListeners","notify","indexOf","_this5","listener"],"mappings":"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","sourcesContent":["import _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport { difference, replaceAt } from './utils';\nimport { notifyManager } from './notifyManager';\nimport { QueryObserver } from './queryObserver';\nimport { Subscribable } from './subscribable';\nexport var QueriesObserver = /*#__PURE__*/function (_Subscribable) {\n  _inheritsLoose(QueriesObserver, _Subscribable);\n\n  function QueriesObserver(client, queries) {\n    var _this;\n\n    _this = _Subscribable.call(this) || this;\n    _this.client = client;\n    _this.queries = [];\n    _this.result = [];\n    _this.observers = [];\n    _this.observersMap = {};\n\n    if (queries) {\n      _this.setQueries(queries);\n    }\n\n    return _this;\n  }\n\n  var _proto = QueriesObserver.prototype;\n\n  _proto.onSubscribe = function onSubscribe() {\n    var _this2 = this;\n\n    if (this.listeners.length === 1) {\n      this.observers.forEach(function (observer) {\n        observer.subscribe(function (result) {\n          _this2.onUpdate(observer, result);\n        });\n      });\n    }\n  };\n\n  _proto.onUnsubscribe = function onUnsubscribe() {\n    if (!this.listeners.length) {\n      this.destroy();\n    }\n  };\n\n  _proto.destroy = function destroy() {\n    this.listeners = [];\n    this.observers.forEach(function (observer) {\n      observer.destroy();\n    });\n  };\n\n  _proto.setQueries = function setQueries(queries, notifyOptions) {\n    this.queries = queries;\n    this.updateObservers(notifyOptions);\n  };\n\n  _proto.getCurrentResult = function getCurrentResult() {\n    return this.result;\n  };\n\n  _proto.getOptimisticResult = function getOptimisticResult(queries) {\n    return this.findMatchingObservers(queries).map(function (match) {\n      return match.observer.getCurrentResult();\n    });\n  };\n\n  _proto.findMatchingObservers = function findMatchingObservers(queries) {\n    var _this3 = this;\n\n    var prevObservers = this.observers;\n    var defaultedQueryOptions = queries.map(function (options) {\n      return _this3.client.defaultQueryObserverOptions(options);\n    });\n    var matchingObservers = defaultedQueryOptions.flatMap(function (defaultedOptions) {\n      var match = prevObservers.find(function (observer) {\n        return observer.options.queryHash === defaultedOptions.queryHash;\n      });\n\n      if (match != null) {\n        return [{\n          defaultedQueryOptions: defaultedOptions,\n          observer: match\n        }];\n      }\n\n      return [];\n    });\n    var matchedQueryHashes = matchingObservers.map(function (match) {\n      return match.defaultedQueryOptions.queryHash;\n    });\n    var unmatchedQueries = defaultedQueryOptions.filter(function (defaultedOptions) {\n      return !matchedQueryHashes.includes(defaultedOptions.queryHash);\n    });\n    var unmatchedObservers = prevObservers.filter(function (prevObserver) {\n      return !matchingObservers.some(function (match) {\n        return match.observer === prevObserver;\n      });\n    });\n    var newOrReusedObservers = unmatchedQueries.map(function (options, index) {\n      if (options.keepPreviousData) {\n        // return previous data from one of the observers that no longer match\n        var previouslyUsedObserver = unmatchedObservers[index];\n\n        if (previouslyUsedObserver !== undefined) {\n          return {\n            defaultedQueryOptions: options,\n            observer: previouslyUsedObserver\n          };\n        }\n      }\n\n      return {\n        defaultedQueryOptions: options,\n        observer: _this3.getObserver(options)\n      };\n    });\n    return matchingObservers.concat(newOrReusedObservers);\n  };\n\n  _proto.getObserver = function getObserver(options) {\n    var defaultedOptions = this.client.defaultQueryObserverOptions(options);\n    var currentObserver = this.observersMap[defaultedOptions.queryHash];\n    return currentObserver != null ? currentObserver : new QueryObserver(this.client, defaultedOptions);\n  };\n\n  _proto.updateObservers = function updateObservers(notifyOptions) {\n    var _this4 = this;\n\n    notifyManager.batch(function () {\n      var prevObservers = _this4.observers;\n\n      var newObserverMatches = _this4.findMatchingObservers(_this4.queries); // set options for the new observers to notify of changes\n\n\n      newObserverMatches.forEach(function (match) {\n        return match.observer.setOptions(match.defaultedQueryOptions, notifyOptions);\n      });\n      var newObservers = newObserverMatches.map(function (match) {\n        return match.observer;\n      });\n      var newObserversMap = Object.fromEntries(newObservers.map(function (observer) {\n        return [observer.options.queryHash, observer];\n      }));\n      var newResult = newObservers.map(function (observer) {\n        return observer.getCurrentResult();\n      });\n      var hasIndexChange = newObservers.some(function (observer, index) {\n        return observer !== prevObservers[index];\n      });\n\n      if (prevObservers.length === newObservers.length && !hasIndexChange) {\n        return;\n      }\n\n      _this4.observers = newObservers;\n      _this4.observersMap = newObserversMap;\n      _this4.result = newResult;\n\n      if (!_this4.hasListeners()) {\n        return;\n      }\n\n      difference(prevObservers, newObservers).forEach(function (observer) {\n        observer.destroy();\n      });\n      difference(newObservers, prevObservers).forEach(function (observer) {\n        observer.subscribe(function (result) {\n          _this4.onUpdate(observer, result);\n        });\n      });\n\n      _this4.notify();\n    });\n  };\n\n  _proto.onUpdate = function onUpdate(observer, result) {\n    var index = this.observers.indexOf(observer);\n\n    if (index !== -1) {\n      this.result = replaceAt(this.result, index, result);\n      this.notify();\n    }\n  };\n\n  _proto.notify = function notify() {\n    var _this5 = this;\n\n    notifyManager.batch(function () {\n      _this5.listeners.forEach(function (listener) {\n        listener(_this5.result);\n      });\n    });\n  };\n\n  return QueriesObserver;\n}(Subscribable);"]},"metadata":{},"sourceType":"module"}